# This script extracts block IDs from the specified Minecraft version.
# Block IDs are written to blocks_{version}.py in the same directory as the script.
# Example: python get_block_id.py 1.21.3  ->  block_1_21_3.py
# Rename the file to blocks.py and use it in your Python code.

import os
# import json
import zipfile
import argparse
import platform


if platform.system() == "Windows":
    minecraft_dir = os.path.expanduser("~/AppData/Roaming/.minecraft")
else:
    minecraft_dir = os.path.expanduser("~/.minecraft")


def is_version_1_13_or_later(version):
    major, minor, _patch = map(int, version.split('.'))
    if major < 1:
        return False
    elif major == 1 and minor < 13:
        return False
    else:
        return True


def extract_block_ids_for_1_13_or_later(jar_path, output_file):
    try:
        with zipfile.ZipFile(jar_path, 'r') as jar:
            blockstates_dir = "assets/minecraft/blockstates/"
            block_ids = []
            for file in jar.namelist():
                if file.startswith(blockstates_dir) and file.endswith(".json"):
                    with jar.open(file) as f:
                        # data = json.load(f)
                        block_id = file[len(blockstates_dir):-5]
                        block_ids.append(block_id)
    except Exception as e:
        print(f"\nError: {e}\n")
        print(f"Are you sure you have Minecraft {minecraft_version}? Try another version.")
        exit()

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("# Block IDs for Minecraft " + minecraft_version + "\n")
        f.write("#   auto-generated by get_block_id.py as block_" + minecraft_version + ".py\n")
        f.write("# Usage:\n")
        f.write("#     Copy this file as block.py\n\n")
        f.write("#     Use it in python code like below:\n")
        f.write("#     from param_MCJE import blocks\n")
        f.write("#     mc.setBlock(5, 5, 5, blocks.SEA_LANTERN)\n\n")
        for block_id in sorted(block_ids):
            formatted_id = block_id.upper().replace("MINECRAFT:", "") + f' = "{block_id}"'
            # print(formatted_id)
            f.write(formatted_id + "\n")

# Block IDs for Minecraft 1.21.4
#   auto-generated by get_block_id.py as block_1_21_4.py

# You can use -h or --help to see the usage.
parser = argparse.ArgumentParser(description='Extract Minecraft block IDs.')
parser.add_argument('version', type=str, help='Minecraft version')

args = parser.parse_args()
minecraft_version = args.version

script_dir = os.path.dirname(os.path.abspath(__file__))
version_formatted = minecraft_version.replace('.', '_')
file_name = f"blocks_{version_formatted}.py"

output_file = os.path.join(script_dir, file_name)

jar_path = os.path.join(minecraft_dir, "versions", minecraft_version, f"{minecraft_version}.jar")

if is_version_1_13_or_later(minecraft_version):
    extract_block_ids_for_1_13_or_later(jar_path, output_file)
else:
    print("This version is not supported.")
    exit()

print(f"Block IDs have been written to:\n{output_file}")
